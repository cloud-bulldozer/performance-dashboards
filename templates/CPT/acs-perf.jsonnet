/*
 * Generated by Claude Code
 */
local panels = import '../../assets/acs-perf/panels.libsonnet';
local queries = import '../../assets/acs-perf/queries.libsonnet';
local variables = import '../../assets/acs-perf/variables.libsonnet';
local g = import 'github.com/grafana/grafonnet/gen/grafonnet-latest/main.libsonnet';

g.dashboard.new('Kube-burner report for ACS')
+ g.dashboard.withDescription(|||
  Dashboard for ACS (Advanced Cluster Security) performance testing with kube-burner
|||)
+ g.dashboard.withTags(['kube-burner', 'acs', 'performance'])
+ g.dashboard.time.withFrom('now-30d')
+ g.dashboard.time.withTo('now')
+ g.dashboard.withTimezone('utc')
+ g.dashboard.timepicker.withRefreshIntervals(['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'])
+ g.dashboard.withRefresh('')
+ g.dashboard.withEditable(true)
+ g.dashboard.graphTooltip.withSharedCrosshair()
+ g.dashboard.withVariables([
  variables.Datasource,
  variables.platform,
  variables.sdn,
  variables.clusterType,
  variables.job,
  variables.workerNodesCount,
  variables.ocpMajorVersion,
  variables.run_date,
  variables.acs_version,
  variables.uuid_from_date,
  variables.uuid,
  variables.uuid_bkp,
  variables.compare_by,
  variables.acs_component,
  variables.node_roles,
])
+ g.dashboard.withPanels([
  // Job Summary Tables
  panels.table.withJobSummary('', '', [queries.jobSummary.query()], { x: 0, y: 0, w: 24, h: 6 }),
  panels.table.withJobDetails('', '', [queries.jobSummary.query()], { x: 0, y: 6, w: 24, h: 5 }),

  // ACS Version Information Table
  panels.table.withACSVersionInfo('ACS Version Information', '', [queries.acsVersionInfo.query()], { x: 0, y: 11, w: 24, h: 5 }),

  // ACS Stats Row
  g.panel.row.new('ACS Stats')
  + g.panel.row.withGridPos({ x: 0, y: 16, w: 24, h: 1 }),
  panels.barChart.withACSQueueDepth('Central Deployment Queue Depth', '', [
    queries.centralDeploymentQueueDepth.addOperations(),
    queries.centralDeploymentQueueDepth.removeOperations(),
  ], { x: 0, y: 17, w: 10, h: 6 }),
  panels.barChart.withSensorDrops('Sensor Process Enrichment Drops', '', [queries.sensorProcessEnrichmentDrops.query()], { x: 10, y: 17, w: 10, h: 6 }),

  // ACS Component Performance (Repeating Row)
  g.panel.row.new('$acs_component')
  + g.panel.row.withGridPos({ x: 0, y: 23, w: 24, h: 1 })
  + g.panel.row.withRepeat('acs_component'),
  panels.barChart.withACSMemoryUsage('Max WSS Usage $acs_component', 'bytes', [queries.acsComponentMemory.maxWSS()], { x: 0, y: 24, w: 10, h: 5 }),
  panels.barChart.withACSCPUUsage('Max CPU Usage $acs_component', 'cores', [queries.acsComponentCPU.maxCPU()], { x: 10, y: 24, w: 10, h: 5 }),
  panels.barChart.withP90Memory('p90 WSS Usage $acs_component', 'bytes', [queries.acsComponentMemory.p90WSS()], { x: 0, y: 29, w: 10, h: 5 }),
  panels.barChart.withP90CPU('p90 CPU Usage $acs_component', 'cores', [queries.acsComponentCPU.p90CPU()], { x: 10, y: 29, w: 10, h: 5 }),

  // Node Usage (Collapsed Row)
  g.panel.row.new('Node Usage')
  + g.panel.row.withGridPos({ x: 0, y: 56, w: 24, h: 1 })
  + g.panel.row.withCollapsed(true)
  + g.panel.row.withPanels([
    panels.barGauge.withNodeCPUUsage('$workerNodesCount nodes - CPU usage $node_roles', 'cores', [queries.nodeCPUUsage.query()], { x: 0, y: 29, w: 8, h: 4 }),
    panels.barGauge.withNodeCPUUsage('Maximum CPU usage $node_roles', 'cores', [queries.nodeCPUUsage.maxCPU()], { x: 0, y: 33, w: 8, h: 4 }),
    panels.barGauge.withNodeMemoryUsage('$workerNodesCount nodes - Memory usage $node_roles', 'bytes', [queries.nodeMemoryUsage.query()], { x: 0, y: 37, w: 8, h: 4 }),
    panels.barGauge.withNodeMemoryUsage('$workerNodesCount nodes - Maximum aggregated memory usage $node_roles', 'bytes', [queries.nodeMemoryUsage.maxAggregated()], { x: 0, y: 41, w: 8, h: 4 }),
    panels.barChart.withClusterUsageRatio('Max Cluster CPU usage ratio', '', [queries.clusterUsageRatio.maxCPU()], { x: 0, y: 45, w: 12, h: 6 }),
    panels.barChart.withClusterUsageRatio('Max Cluster memory usage ratio', '', [queries.clusterUsageRatio.maxMemory()], { x: 12, y: 45, w: 12, h: 6 }),
  ]),

  // Pod & Service Latency (Collapsed Row)
  g.panel.row.new('Pod & Service ready latency')
  + g.panel.row.withGridPos({ x: 0, y: 57, w: 24, h: 1 })
  + g.panel.row.withCollapsed(true)
  + g.panel.row.withPanels([
    panels.barGauge.withPodLatency('$workerNodesCount nodes - P99 Pod ready latency', 'ms', [queries.podLatency.p99Ready()], { x: 0, y: 30, w: 12, h: 6 }),
    panels.barGauge.withServiceLatency('$workerNodesCount nodes - P99 Service ready latency', 'ns', [queries.serviceLatency.p99Ready()], { x: 12, y: 30, w: 12, h: 6 }),
  ]),

  // API Latency (Collapsed Row)
  g.panel.row.new('API latency')
  + g.panel.row.withGridPos({ x: 0, y: 58, w: 24, h: 1 })
  + g.panel.row.withCollapsed(true)
  + g.panel.row.withPanels([
    panels.barChart.withAPILatency('Read Only API request P99 latency - resource scoped', 's', [queries.apiLatency.readOnlyResource()], { x: 0, y: 31, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Maximum Read Only API request P99 latency - resource scoped', 's', [queries.apiLatency.maxReadOnlyResource()], { x: 12, y: 31, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Read Only API request P99 latency - namespace scoped', 's', [queries.apiLatency.readOnlyNamespace()], { x: 0, y: 37, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Maximum Read Only API request P99 latency - namespace scoped', 's', [queries.apiLatency.maxReadOnlyNamespace()], { x: 12, y: 37, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Read Only API request P99 latency - cluster scoped', 's', [queries.apiLatency.readOnlyCluster()], { x: 0, y: 43, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Maximum Read Only API request P99 latency - cluster scoped', 's', [queries.apiLatency.maxReadOnlyCluster()], { x: 12, y: 43, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Mutating API request P99 latency', 's', [queries.apiLatency.mutating()], { x: 0, y: 49, w: 12, h: 6 }),
    panels.barChart.withAPILatency('Maximum Mutating API request P99 latency', 's', [queries.apiLatency.maxMutating()], { x: 12, y: 49, w: 12, h: 6 }),
  ]),
])
