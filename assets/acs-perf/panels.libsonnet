/*
 * Generated by Claude Code
 */
local g = import 'github.com/grafana/grafonnet/gen/grafonnet-latest/main.libsonnet';

{
  table: {
    local table = g.panel.table,
    local options = table.options,

    base(title, unit, targets, gridPos):
      table.new(title)
      + table.datasource.withType('elasticsearch')
      + table.datasource.withUid('$Datasource')
      + table.standardOptions.withUnit(unit)
      + table.queryOptions.withTargets(targets)
      + table.gridPos.withX(gridPos.x)
      + table.gridPos.withY(gridPos.y)
      + table.gridPos.withH(gridPos.h)
      + table.gridPos.withW(gridPos.w),

    withJobSummary(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + table.queryOptions.withTransformations([
        {
          id: 'organize',
          options: {
            excludeByName: {
              _id: true,
              _index: true,
              _type: true,
              benchmark: true,
              clustertype: true,
              endDate: true,
              end_date: true,
              highlight: true,
              'jobConfig.burst': true,
              'jobConfig.cleanup': true,
              'jobConfig.errorOnVerify': true,
              'jobConfig.iterationsPerNamespace': true,
              'jobConfig.jobIterationDelay': true,
              'jobConfig.jobIterations': true,
              'jobConfig.jobPause': true,
              'jobConfig.jobType': true,
              'jobConfig.maxWaitTimeout': true,
              'jobConfig.namespace': true,
              'jobConfig.namespaced': true,
              'jobConfig.namespacedIterations': true,
              'jobConfig.objects': true,
              'jobConfig.preLoadImages': true,
              'jobConfig.preLoadPeriod': true,
              'jobConfig.qps': true,
              'jobConfig.verifyObjects': true,
              'jobConfig.waitFor': true,
              'jobConfig.waitForDeletion': true,
              'jobConfig.waitWhenFinished': true,
              k8sVersion: true,
              metricName: true,
              ocp_version: true,
              platform: false,
              sdn_type: false,
              sort: true,
              timestamp: false,
              total_nodes: false,
              uuid: false,
              workload: true,
              workload_nodes_count: true,
              workload_nodes_type: true,
            },
            renameByName: {
              clusterName: 'Cluster',
              elapsedTime: 'Elapsed time',
              infraNodesCount: 'infra count',
              infraNodesType: 'infra type',
              'jobConfig.burst': 'Burst',
              'jobConfig.name': 'Name',
              'jobConfig.qps': 'QPS',
              k8sVersion: 'k8s version',
              masterNodesType: 'master type',
              ocpVersion: 'OCP version',
              passed: 'Passed',
              platform: 'Platform',
              sdnType: 'SDN',
              timestamp: 'Date',
              totalNodes: 'total nodes',
              uuid: 'UUID',
              workerNodesCount: 'worker count',
              workerNodesType: 'worker type',
            },
          },
        },
      ])
      + table.standardOptions.withOverrides([
        {
          matcher: {
            id: 'byName',
            options: 'passed',
          },
          properties: [
            {
              id: 'custom.cellOptions',
              value: {
                mode: 'basic',
                type: 'color-background',
              },
            },
          ],
        },
        {
          matcher: {
            id: 'byName',
            options: 'Date',
          },
          properties: [
            {
              id: 'custom.width',
              value: 177,
            },
          ],
        },
      ])
      + table.standardOptions.withMappings([
        {
          options: {
            passed: {
              color: 'green',
              index: 0,
            },
          },
          type: 'value',
        },
      ])
      + table.standardOptions.thresholds.withSteps([
        {
          color: 'green',
          value: null,
        },
      ]),

    withJobDetails(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + table.queryOptions.withTransformations([
        {
          id: 'organize',
          options: {
            excludeByName: {
              _id: true,
              _index: true,
              _type: true,
              highlight: true,
              'jobConfig.churnDelay': true,
              'jobConfig.churnDuration': true,
              'jobConfig.churnPercent': true,
              'jobConfig.cleanup': true,
              'jobConfig.errorOnVerify': true,
              'jobConfig.iterationsPerNamespace': true,
              'jobConfig.jobIterationDelay': true,
              'jobConfig.jobIterations': false,
              'jobConfig.jobPause': true,
              'jobConfig.jobType': true,
              'jobConfig.maxWaitTimeout': true,
              'jobConfig.name': false,
              'jobConfig.namespace': true,
              'jobConfig.namespaced': true,
              'jobConfig.namespacedIterations': true,
              'jobConfig.objects': true,
              'jobConfig.podWait': true,
              'jobConfig.preLoadImages': true,
              'jobConfig.preLoadPeriod': true,
              'jobConfig.verifyObjects': true,
              'jobConfig.waitFor': true,
              'jobConfig.waitForDeletion': true,
              'jobConfig.waitWhenFinished': true,
              metricName: true,
              sort: true,
              timestamp: false,
              uuid: false,
            },
            renameByName: {
              elapsedTime: 'Elapsed time',
              'jobConfig.burst': 'Burst',
              'jobConfig.jobIterations': 'Iterations',
              'jobConfig.name': 'Name',
              'jobConfig.qps': 'QPS',
              timestamp: 'Date',
              uuid: 'UUID',
              version: 'Kube-burner version',
            },
          },
        },
      ])
      + table.standardOptions.withOverrides([
        {
          matcher: {
            id: 'byName',
            options: 'Elapsed time',
          },
          properties: [
            {
              id: 'unit',
              value: 's',
            },
          ],
        },
        {
          matcher: {
            id: 'byName',
            options: 'Date',
          },
          properties: [
            {
              id: 'custom.width',
              value: 175,
            },
          ],
        },
      ]),
  },

  barChart: {
    local barchart = g.panel.barChart,
    local options = barchart.options,
    local custom = barchart.fieldConfig.defaults.custom,

    base(title, unit, targets, gridPos):
      barchart.new(title)
      + barchart.datasource.withType('elasticsearch')
      + barchart.datasource.withUid('${Datasource}')
      + barchart.standardOptions.withUnit(unit)
      + barchart.queryOptions.withTargets(targets)
      + barchart.gridPos.withX(gridPos.x)
      + barchart.gridPos.withY(gridPos.y)
      + barchart.gridPos.withH(gridPos.h)
      + barchart.gridPos.withW(gridPos.w),

    withACSQueueDepth(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + barchart.standardOptions.color.withFixedColor('light-red')
      + barchart.standardOptions.color.withMode('fixed')
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(2)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(true)
      + options.legend.withDisplayMode('list')
      + options.legend.withPlacement('bottom')
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7)
      + barchart.queryOptions.withTransformations([
        {
          id: 'calculateField',
          options: {
            alias: 'queue diff',
            binary: {
              left: 'value 1',
              operator: '-',
              right: 'value 2',
            },
            mode: 'binary',
          },
        },
        {
          id: 'groupBy',
          options: {
            fields: {
              'queue diff': {
                aggregations: ['sum'],
                operation: 'aggregate',
              },
              'uuid 1': {
                aggregations: [],
                operation: 'groupby',
              },
              'uuid 2': {
                aggregations: [],
                operation: 'groupby',
              },
            },
          },
        },
      ]),

    withSensorDrops(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + barchart.standardOptions.color.withFixedColor('light-purple')
      + barchart.standardOptions.color.withMode('fixed')
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(2)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(false)
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7),

    withACSMemoryUsage(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + barchart.standardOptions.color.withFixedColor('blue')
      + barchart.standardOptions.color.withMode('fixed')
      + barchart.standardOptions.withMin(0)
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(2)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(false)
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7)
      + options.withShowValue('always'),

    withACSCPUUsage(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + barchart.standardOptions.color.withFixedColor('yellow')
      + barchart.standardOptions.color.withMode('fixed')
      + barchart.standardOptions.withMin(0)
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(10)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(false)
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7)
      + options.withShowValue('always'),

    withP90Memory(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + barchart.standardOptions.color.withFixedColor('super-light-blue')
      + barchart.standardOptions.color.withMode('fixed')
      + barchart.standardOptions.withMin(0)
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(2)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(false)
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7)
      + options.withShowValue('always'),

    withP90CPU(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + barchart.standardOptions.color.withFixedColor('super-light-yellow')
      + barchart.standardOptions.color.withMode('fixed')
      + barchart.standardOptions.withMin(0)
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(10)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(false)
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7)
      + options.withShowValue('always'),

    withAPILatency(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(2)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(true)
      + options.legend.withDisplayMode('list')
      + options.legend.withPlacement('bottom')
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7),

    withClusterUsageRatio(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + custom.withFillOpacity(80)
      + custom.scaleDistribution.withLog(2)
      + custom.scaleDistribution.withType('log')
      + options.legend.withShowLegend(false)
      + options.withOrientation('horizontal')
      + options.withBarWidth(0.97)
      + options.withGroupWidth(0.7)
      + options.withShowValue('always')
      + barchart.standardOptions.thresholds.withMode('percentage')
      + barchart.standardOptions.thresholds.withSteps([
        { color: 'green' },
        { color: 'orange', value: 70 },
        { color: 'red', value: 85 },
      ]),
  },

  barGauge: {
    local bargauge = g.panel.barGauge,
    local options = bargauge.options,

    base(title, unit, targets, gridPos):
      bargauge.new(title)
      + bargauge.queryOptions.withTargets(targets)
      + bargauge.datasource.withType('elasticsearch')
      + bargauge.datasource.withUid('$Datasource')
      + bargauge.standardOptions.withUnit(unit)
      + bargauge.gridPos.withX(gridPos.x)
      + bargauge.gridPos.withY(gridPos.y)
      + bargauge.gridPos.withH(gridPos.h)
      + bargauge.gridPos.withW(gridPos.w)
      + options.withOrientation('horizontal')
      + options.withDisplayMode('gradient')
      + options.withValueMode('color')
      + options.withShowUnfilled(true)
      + options.withMinVizWidth(0)
      + options.withMinVizHeight(10),

    withNodeCPUUsage(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + bargauge.panelOptions.withRepeat('node_roles')
      + bargauge.standardOptions.withMin(0)
      + options.reduceOptions.withCalcs(['lastNotNull'])
      + bargauge.standardOptions.color.withMode('palette-classic'),

    withNodeMemoryUsage(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + bargauge.panelOptions.withRepeat('node_roles')
      + bargauge.standardOptions.withMin(5)
      + options.reduceOptions.withCalcs(['lastNotNull'])
      + bargauge.standardOptions.color.withFixedColor('dark-red')
      + bargauge.standardOptions.color.withMode('palette-classic'),

    withPodLatency(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + bargauge.standardOptions.withMin(0)
      + options.reduceOptions.withCalcs(['lastNotNull'])
      + bargauge.standardOptions.color.withMode('palette-classic')
      + bargauge.standardOptions.thresholds.withSteps([
        { color: 'green' },
        { color: 'red', value: 5000 },
      ]),

    withServiceLatency(title, unit, targets, gridPos):
      self.base(title, unit, targets, gridPos)
      + bargauge.standardOptions.withMin(0)
      + bargauge.standardOptions.color.withFixedColor('orange')
      + bargauge.standardOptions.color.withMode('fixed')
      + options.reduceOptions.withCalcs(['lastNotNull'])
      + bargauge.standardOptions.thresholds.withSteps([
        { color: 'green' },
        { color: 'red', value: 5000 },
      ]),
  },

}
